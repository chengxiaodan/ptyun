/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _pt_utilEs = __webpack_require__(1);

	var _pt_utilEs2 = _interopRequireDefault(_pt_utilEs);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	_pt_utilEs2.default.namespace('PT.Index');

	PT.Index = function () {
		this.appList = 10;
		this.count = 0; // 总数
		this.pageCount = 0; // 后台总页数
		this.current = 1; // 当前页
		this.limit = 10;
		this.mark = 0;
		this.http = _pt_utilEs2.default.http();
		this.datas = [];
		var cookieObj = {};
		this.init();
		this.bindEvent();
	};
	PT.Index.prototype = {
		init: function init() {
			var self = this;
			self.appList = 10;
			self.cookieObj = _pt_utilEs2.default.getToken();
			self.active("appManage");
			self.getApplist("appManage");
		},
		bindEvent: function bindEvent() {
			var self = this;
			$("#appSecretKey").val(self.http.secretkey);
			var list = $(".left-main ul li");
			for (var i = 0; i < list.length; i++) {
				(function (Index) {
					$(list[i]).click(function () {
						$(this).siblings('li').find("a").removeClass('active');
						$(this).find("a").addClass("active");
						var id = $(this).find("a").data("id");
						self.active(id);
					});
				})(i);
			};
			var inputtext = $("input");
			inputtext.keyup(function () {
				var content_len = $(this).val().length;
				if (content_len == 0) {
					$(this).siblings(".tip").hide();
				} else {
					$(this).siblings(".tip").show();
				}
			});
			var textarea = $("textarea");

			textarea.keyup(function () {
				var content_len = $(this).val().length;
				if (content_len == 0) {
					$(this).siblings(".tip").hide();
				} else {
					$(this).siblings(".tip").show();
				}
			});
			$("#addAPPbtn").click(function () {
				$("#addAppUrl").val("");
				$("#addAppType").val("");
				$("#addAppBuildId").val("");
				$("#addAppDes").val("");
				$("#addAppName").val("");
				$("#addAppVersion").val("");
				$("#addapp_error").hide();
				$("#addAPP").show();
			});
			$("#save_addApp").on("click", function (e) {
				if ($.trim($("#addAppName").val()) !== "") {
					self.addApp();
				} else {
					$("#addapp_error").text("应用名称不能为空");
					$("#addapp_error").show();
				}
				e.preventDefault();
			});
			$("#deleteAPPbtn").click(function () {
				self.deleteValue();
			});
			$(".cancle").click(function () {
				$("#addAPP").hide();
				$("#editAPP").hide();
				$("#deleteAPP").hide();
			});
		},
		getApplist: function getApplist(str) {
			var self = this;
			//		//滚动条分页
			//		$("#" + str + "Table").scroll(function(e) {
			//			var viewH = $(this).height(); //可见高度
			//			var contentH = $(this)[0].scrollHeight; //内容高度
			//			var scrollTop = $(this).scrollTop(); //滚动高度
			//			if(scrollTop / (contentH - viewH) >= 1) {
			//				//此处加载数据
			//				self.getApplist(str);
			//			}
			//			e.preventDefault();
			//		});
			var requestData = {
				"limit": self.limit + "", //每页信息最多显示条数
				"offset": self.mark == 0 ? self.mark + "" : self.appList + "" //请求第多少条数据 比如 0 10 20
			};

			$.ajax({
				type: 'post',
				url: self.http.server,
				headers: {
					"method": "cloud.app.list",
					"appid": self.http.appid,
					"sign": _pt_utilEs2.default.getSign(JSON.stringify(requestData), self.http.secretkey),
					"timestramp": Date.parse(new Date()) / 1000,
					"token": self.cookieObj.token,
					"uid": self.cookieObj.uid
				},
				data: JSON.stringify(requestData),
				dataType: 'json',
				contentType: "application/json; charset=utf-8",
				beforeSend: function beforeSend() {
					var loading = $('<div class="loadingMask"></div>');
					var loadEffect = $('<div class="loadEffect"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></div>');
					loadEffect.appendTo(loading);
					loading.appendTo("body");
				},
				complete: function complete() {
					$(".loadingMask").remove();
				},
				cache: false,
				success: function success(data) {
					if (data.error_code == 62002) {
						_pt_utilEs2.default.confirmBox("token错误,请重新登录!");
					} else if (data.error_code == 0) {
						var dataList = data.data;
						self.count = data.count;
						if (dataList.length !== 0) {
							$.each(dataList, function (index, item) {
								self.datas.push(item);
								if (index <= 9) {
									self.renderTable(str, item);
								}
							});
							self.clickBtn();
						}
						if (self.count > 10) {
							$("#appPage").show();
							self.pageCount = Math.ceil(self.count / self.limit);
							self.current = self.mark == 0 ? 1 : self.appList / self.limit + 1;
							self.mark = 1;
							$('#appPage').perfectPager({
								pageCount: self.pageCount,
								current: self.current,
								easyMode: true,
								callback: function callback(currentNum) {
									//此处是激活当前页
									//currentNum 当前页码
									self.appList = (currentNum - 1) * self.limit; //从后台获取第多少条开始获取数据 比如 0 10 20
									$("#" + str + "Table").empty(); //清空之前渲染数据
									self.getApplist(str);
								}
							}).appendTo($('#appPage'));
						} else {
							$("#appPage").hide();
						}
					} else {
						_pt_utilEs2.default.showBox("获取数据失败");
					}
				},
				error: function error(XMLHttpRequest, textStatus, errorThrown) {}
			});
		},
		//点击操作按钮
		clickBtn: function clickBtn() {
			var self = this;
			$('#appManage tr td a').on("click", function () {
				var tdSeq = $(this).parent().parent().find("td").index($(this).parent()); //触发的列数
				var trSeq = $(this).parent().parent().parent().find("tr").index($(this).parent().parent()); //触发的行数
				var data_id = $(this).parent().parent().parent().find("tr:eq(" + trSeq + ")").data('id').substring(3);
				var that = $(this);
				$.each(self.datas, function (index, item) {
					if (parseInt(data_id) == item.id) {
						var str = that.text();
						switch (str) {
							case "编辑":
								self.editValue(item);
								break;
						}
					}
				});
			});
		},
		cacheData: function cacheData() {
			var self = this;
			var checkeds = [];
			var selects = $('#appManageTable  td input[type=checkbox]');
			for (var i = 0; i < selects.length; i++) {
				(function (Index) {
					var td = $(selects[Index]).parent().parent().parent();
					var tr = $(selects[Index]).parent().parent().parent().parent();
					if (selects[Index].checked == true) {
						checkeds.push(parseInt(tr.data("id").substring(3)));
					}
				})(i);
			}
			return checkeds;
		},
		getCheckApp: function getCheckApp() {
			var self = this;
			var checkedDatas = [];
			var checkeds = self.cacheData();
			for (var i = 0; i < checkeds.length; i++) {
				$.each(self.datas, function (index, item) {
					if (checkeds[i] == item.id) {
						checkedDatas.push(item);
					}
				});
			}
			return checkedDatas;
		},
		reset: function reset() {
			var self = this;
			self.appList = 10;
			$("#appManageTable").empty();
			self.getApplist("appManage");
			$("#addAPP").hide();
			$("#editAPP").hide();
			$("#deleteAPP").hide();
		},
		addApp: function addApp() {
			var self = this;
			var checkedAttrs = [];
			var list = $("#addAPP").find("ul li input[type=checkbox]");
			for (var i = 0; i < list.length; i++) {
				(function (Index) {
					if (list[Index].checked == true) {
						checkedAttrs.push(list[Index].value);
					}
				})(i);
			}
			var attrs = self.getSelected(checkedAttrs) + "";
			var requestData = {
				"name": $("#addAppName").val(),
				"description": $("#addAppDes").val(),
				"version": $("#addAppVersion").val(),
				"url": $("#addAppUrl").val(),
				"type": $("#addAppType").val(),
				"build_id": $("#addAppBuildId").val(),
				"attrs": attrs
			};
			$.ajax({
				type: 'post',
				url: self.http.server,
				headers: {
					"method": "cloud.app.add",
					"appid": self.http.appid,
					"sign": _pt_utilEs2.default.getSign(JSON.stringify(requestData), self.http.secretkey),
					"timestramp": Date.parse(new Date()) / 1000,
					"token": self.cookieObj.token,
					"uid": self.cookieObj.uid
				},
				data: JSON.stringify(requestData),
				dataType: 'json',
				contentType: "application/json; charset=utf-8",
				beforeSend: function beforeSend() {
					var loading = $('<div class="loadingMask"></div>');
					var loadEffect = $('<div class="loadEffect"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></div>');
					loadEffect.appendTo(loading);
					loading.appendTo("body");
				},
				complete: function complete() {
					$(".loadingMask").remove();
				},
				cache: false,
				success: function success(data) {
					if (data.error_code == 62002) {
						_pt_utilEs2.default.confirmBox("token错误,请重新登录!");
					} else if (data.error_code == 0) {
						self.reset();
						//					PT_utils.showBox("添加成功")
						$("#addapp_error").hide();
					} else {
						_pt_utilEs2.default.showBox(data.msg);
					}
				},
				error: function error(XMLHttpRequest, textStatus, errorThrown) {}
			});
		},
		showTip: function showTip() {
			var inputlist = $("input");
			for (var j = 0; j < inputlist.length; j++) {
				(function (Index) {
					if ($.trim($(inputlist[Index]).val()).length == 0) {
						$(inputlist[Index]).siblings(".tip").hide();
					} else {
						$(inputlist[Index]).siblings(".tip").show();
					}
				})(j);
			}
			if ($.trim($("textarea").val()).length == 0) {
				$("textarea").siblings(".tip").hide();
			} else {
				$("textarea").siblings(".tip").show();
			}
		},
		editValue: function editValue(obj) {
			var self = this;
			$("#editapp_error").hide();
			$("#editAppId").val("");
			$("#editAppUrl").val("");
			$("#editAppType").val("");
			$("#editAppBuildId").val("");
			$("#editAppDes").val("");
			$("#editAppName").val("");
			$("#editAppVersion").val("");

			$("#editAppId").val(obj.appid);
			$("#editAppUrl").val(obj.url);
			$("#editAppType").val(obj.type);
			$("#editAppBuildId").val(obj.build_id);
			$("#editAppDes").val(obj.description);
			$("#editAppName").val(obj.name);
			$("#editAppVersion").val(obj.version);
			var list = $("#editAPP").find("ul li input[type=checkbox]");
			var service = self.getService(parseInt(obj.attrs));
			for (var i = 0; i < list.length; i++) {
				(function (Index) {
					$.each(service, function (j, item) {
						if (list[Index].value == item.serviceName) {
							if (item.state) {
								list[Index].checked = true;
							}
						}
					});
				})(i);
			}

			self.showTip();
			$("#editAPP").show();

			$("#save_editApp").click(function () {
				if ($.trim($("#editAppName").val()) !== "") {
					var checkedAttrs = [];
					for (var j = 0; j < list.length; j++) {
						if (list[j].checked == true) {
							checkedAttrs.push(list[j].value);
						}
					}
					var attrs = self.getSelected(checkedAttrs);
					obj.attrs = attrs + "";
					self.editApp(obj);
				} else {
					$("#editapp_error").text("应用名称不能为空");
					$("#editapp_error").show();
				}
			});
		},
		editApp: function editApp(obj) {
			var self = this;
			var requestData = {
				"appid": obj.appid,
				"name": $("#editAppName").val(),
				"description": $("#editAppDes").val(),
				"version": $("#editAppVersion").val(),
				"url": $("#editAppUrl").val(),
				"type": $("#editAppType").val(),
				"build_id": $("#editAppBuildId").val(),
				"attrs": obj.attrs
			};
			$.ajax({
				type: 'post',
				url: self.http.server,
				headers: {
					"method": "cloud.app.edit",
					"appid": self.http.appid,
					"sign": _pt_utilEs2.default.getSign(JSON.stringify(requestData), self.http.secretkey),
					"timestramp": Date.parse(new Date()) / 1000,
					"token": self.cookieObj.token,
					"uid": self.cookieObj.uid
				},
				data: JSON.stringify(requestData),
				dataType: 'json',
				contentType: "application/json; charset=utf-8",
				beforeSend: function beforeSend() {
					var loading = $('<div class="loadingMask"></div>');
					var loadEffect = $('<div class="loadEffect"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></div>');
					loadEffect.appendTo(loading);
					loading.appendTo("body");
				},
				complete: function complete() {
					$(".loadingMask").remove();
				},
				cache: false,
				success: function success(data) {
					if (data.error_code == 62002) {
						_pt_utilEs2.default.confirmBox("token错误,请重新登录!");
					} else if (data.error_code == 0) {
						self.reset();
						$("#editapp_error").hide();
						//					PT_utils.showBox("编辑成功");
					} else {
						_pt_utilEs2.default.showBox("编辑失败");
					}
				},
				error: function error(XMLHttpRequest, textStatus, errorThrown) {}
			});
		},
		deleteValue: function deleteValue() {
			var self = this;
			var selects = self.getCheckApp();
			var obj = [];
			if (selects.length == 0) {
				_pt_utilEs2.default.showBox("请选择数据");
			} else {
				$("#deleteAPP").show();
				$("#deletetr").on("click", function () {
					obj = selects;
					var appids = [];
					$.each(obj, function (index, item) {
						appids.push(item.appid);
					});
					self.deleteApp(appids);
				});
			}
		},
		deleteApp: function deleteApp(appids) {
			var self = this;
			var appid = "";
			for (var i = 0; i < appids.length; i++) {
				if (i == 0) {
					appid = appids[i] + "";
				} else {
					appid = appid + ";" + appids[i];
				}
			}
			var requestData = {
				appid: appid
			};
			$.ajax({
				type: 'post',
				url: self.http.server,
				headers: {
					"method": "cloud.app.delete",
					"appid": self.http.appid,
					"sign": _pt_utilEs2.default.getSign(JSON.stringify(requestData), self.http.secretkey),
					"timestramp": Date.parse(new Date()) / 1000,
					"token": self.cookieObj.token,
					"uid": self.cookieObj.uid
				},
				data: JSON.stringify(requestData),
				dataType: 'json',
				contentType: "application/json; charset=utf-8",
				beforeSend: function beforeSend() {
					var loading = $('<div class="loadingMask"></div>');
					var loadEffect = $('<div class="loadEffect"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></div>');
					loadEffect.appendTo(loading);
					loading.appendTo("body");
				},
				complete: function complete() {
					$(".loadingMask").remove();
				},
				cache: false,
				success: function success(data) {
					if (data.error_code == 62002) {
						_pt_utilEs2.default.confirmBox("token错误,请重新登录!");
						//					window.location.href= "login.html";
					} else if (data.error_code == 0) {
						self.reset();
						//					PT_utils.showBox("删除成功");
					} else {
						_pt_utilEs2.default.showBox("删除失败");
					}
				},
				error: function error(XMLHttpRequest, textStatus, errorThrown) {}
			});
		},
		//有数据
		renderTable: function renderTable(item, data) {
			var self = this;
			var $tr = $('<tr data-id="tr_' + data.id + '"></tr>');
			if (item == "appManage") {
				var $checkbox = $('<td><div class="cloud-check"><div class="checkbox">' + '<input type="checkbox" name="checkbox" id="app_' + data.id + '" />' + '<label for="app_' + data.id + '" class="btn-check"></label></div></div></td>');
				//			var $appId = $('<td title="'+data.id+'">' + data.id + '</td>');
				var $appName = $('<td title="' + data.name + '">' + data.name + '</td>');
				var $appCode = $('<td title="' + data.appid + '">' + data.appid + '</td>');
				var $secret_key = $('<td title="' + data.secret_key + '">' + data.secret_key + '</td>');
				var $td = $('<td></td>');
				var $service = $('<div class="service-list"></div>');
				var $ul = $('<ul></ul>');
				var $ul2 = $('<ul></ul>');
				var $ul3 = $('<ul></ul>');
				var $ul4 = $('<ul></ul>');
				var $li = null;
				var $li2 = null;
				var $li3 = null;
				var $li4 = null;
				var service = self.getService(parseInt(data.attrs));
				$.each(service, function (index, item) {
					if (index <= 1) {
						if (item.state) {
							$li = $('<li><div class="service-info success" data-state="true">' + item.serviceName + '</li>');
						} else {
							$li = $('<li><div class="service-info fail">' + item.serviceName + '</li>');
						}
						$li.appendTo($ul);
					} else if (index > 1 && index <= 3) {
						if (item.state) {
							$li2 = $('<li><div class="service-info success">' + item.serviceName + '</li>');
						} else {
							$li2 = $('<li><div class="service-info fail">' + item.serviceName + '</li>');
						}
						$li2.appendTo($ul2);
					} else if (index > 3 && index <= 5) {
						if (item.state) {
							$li3 = $('<li><div class="service-info success">' + item.serviceName + '</li>');
						} else {
							$li3 = $('<li><div class="service-info fail">' + item.serviceName + '</li>');
						}
						$li3.appendTo($ul3);
					} else if (index > 5 && index <= 7) {
						if (item.state) {
							$li4 = $('<li><div class="service-info success">' + item.serviceName + '</li>');
						} else {
							$li4 = $('<li><div class="service-info fail">' + item.serviceName + '</li>');
						}
						$li4.appendTo($ul4);
					}
				});
				$service.appendTo($td);
				$ul.appendTo($service);
				$li.appendTo($ul);
				if ($li2 !== null) {
					$ul2.appendTo($service);
					$ul3.appendTo($service);
					$ul4.appendTo($service);
				}
				var $version = $('<td title="' + data.version + '">' + data.version + '</td>');
				var $btn = $('<td><a>编辑</a></td>');
				$checkbox.appendTo($tr);
				//			$appId.appendTo($tr);
				$appName.appendTo($tr);
				$secret_key.appendTo($tr);
				$appCode.appendTo($tr);
				$td.appendTo($tr);
				$version.appendTo($tr);
				$btn.appendTo($tr);
			}
			$("#" + item + "Table").append($tr);
		},
		getSelected: function getSelected(arr) {
			var attrs = 0;
			for (var i = 0; i < arr.length; i++) {
				switch (arr[i]) {
					case "消息推送":
						attrs = attrs + 1;
						break;
					case "日志收集":
						attrs = attrs + 2;
						break;
					case "崩溃收集":
						attrs = attrs + 4;
						break;
					case "数据采集":
						attrs = attrs + 8;
						break;
					case "服务提供":
						attrs = attrs + 16;
						break;
					case "云存储":
						attrs = attrs + 32;
						break;
					case "语言识别":
						attrs = attrs + 64;
						break;
				}
			}

			return attrs;
		},
		getService: function getService(attrs) {
			var res = [];
			var service = {};
			service.serviceName = "消息推送";
			service.state = attrs & 1 ? true : false;
			res.push(service);

			service = new Object();
			service.serviceName = "日志收集";
			service.state = attrs & 2 ? true : false;
			res.push(service);

			service = new Object();
			service.serviceName = "崩溃收集";
			service.state = attrs & 4 ? true : false;
			res.push(service);

			service = new Object();
			service.serviceName = "数据采集";
			service.state = attrs & 8 ? true : false;
			res.push(service);

			service = new Object();
			service.serviceName = "服务提供";
			service.state = attrs & 16 ? true : false;
			res.push(service);

			service = new Object();
			service.serviceName = "云存储";
			service.state = attrs & 32 ? true : false;
			res.push(service);

			service = new Object();
			service.serviceName = "语言识别";
			service.state = attrs & 64 ? true : false;
			res.push(service);

			return res;
		},
		//显示的页面
		active: function active(str) {
			var self = this;
			var arr = ['appManage', 'second', 'third'];
			$.each(arr, function (i, value) {
				if (str == value) {
					$('#' + value).show();
					$.each(arr, function (j, other) {
						if (other !== value) {
							$('#' + other).hide();
						}
					});
				}
			});
		}
	};
	$(document).ready(function () {
		new PT.Index();
	});

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	/**
	 * 公共方法
	 */
	var pt_utils = {
		http: function http() {
			//测试
			//		const server = "http://dev-api-open.ptdev.cn/";
			//		const appid = "1018040505148900352";
			//		const secretkey = "07E138230250439E8E24293F19B6D725";
			//线上
			var server = "https://api-open.putao.com/";
			var appid = "1018043273668494336";
			var secretkey = "07E13AFF126A4CAFBE58171AAB1CEE51";
			return {
				server: server,
				appid: appid,
				secretkey: secretkey
			};
		},
		getSign: function getSign(str, secretkey) {
			return hex_sha1(hex_md5(str).toLowerCase() + secretkey).toLowerCase();
		},
		namespace: function namespace() {
			for (var _len = arguments.length, obj = Array(_len), _key = 0; _key < _len; _key++) {
				obj[_key] = arguments[_key];
			}

			var a, v, x, o, d, i, j, len1, len2;
			a = obj;
			len1 = a.length;
			// 支持多参数,如两个参数（a.b.c, d.e）
			for (i = 0; i < len1; i++) {
				d = a[i].split('.'); // 分解成数组，如把a.b.c分解成[a,b,c]
				o = window[d[0]] = window[d[0]] || {}; // 保证a是对象,若果全局有就用全局的，如果没有就新建{}
				x = d.slice(1); //取出[b,c]
				len2 = x.length;

				// 支持嵌套，对b和c
				for (j = 0; j < len2; j++) {
					v = x[j];
					o = o[v] = o[v] || {}; // o逐层深入，保证每层都是对象，如果是b，o变为a.b，如果是c，o最后变成a.b.c
				}
			}
		},
		/*判断输入是否为合法的手机号码*/
		isphone: function isphone(inputString) {
			var partten = /^1[0-9]{10}$/;
			var bchk = partten.test(inputString);
			return bchk;
		},
		//验证邮箱
		fChkMail: function fChkMail(mail) {
			var reg = /^[A-Za-z\d]+([-_.][A-Za-z\d]+)*@([A-Za-z\d]+[-.])+[A-Za-z\d]{2,5}$/;
			var bchk = reg.test(mail);
			return bchk;
		},
		//密码长度应为8-16个字符的英文字母和数字
		fChkPassword: function fChkPassword(password) {
			var reg = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,16}$/;
			var bchk = reg.test(password);
			return bchk;
		},
		dateFormat: function dateFormat(time) {
			var format_result = time.getFullYear() + "/";

			if (time.getMonth() + 1 < 10) {
				format_result += "0";
			}
			format_result += time.getMonth() + 1 + "/";
			if (time.getDate() < 10) {
				format_result += "0";
			}
			format_result += time.getDate() + " ";
			if (time.getHours() < 10) {
				format_result += "0";
			}
			format_result += time.getHours() + ":";
			if (time.getMinutes() < 10) {
				format_result += "0";
			}
			format_result += time.getMinutes();
			return format_result;
		},
		//邮箱
		goEail: function goEail(email, ln) {
			var Link = document.getElementById(ln);
			var MailLink = email.split("@")[1];
			MailLink = MailLink.toLowerCase();
			var hash = {
				'qq.com': 'http://mail.qq.com',
				'gmail.com': 'http://mail.google.com',
				'sina.com': 'http://mail.sina.com.cn',
				'163.com': 'http://mail.163.com',
				'126.com': 'http://mail.126.com',
				'yeah.net': 'http://www.yeah.net/',
				'sohu.com': 'http://mail.sohu.com/',
				'tom.com': 'http://mail.tom.com/',
				'sogou.com': 'http://mail.sogou.com/',
				'139.com': 'http://mail.10086.cn/',
				'hotmail.com': 'http://www.hotmail.com',
				'live.com': 'http://login.live.com/',
				'live.cn': 'http://login.live.cn/',
				'live.com.cn': 'http://login.live.com.cn',
				'189.com': 'http://webmail16.189.cn/webmail/',
				'yahoo.com.cn': 'http://mail.cn.yahoo.com/',
				'yahoo.cn': 'http://mail.cn.yahoo.com/',
				'eyou.com': 'http://www.eyou.com/',
				'21cn.com': 'http://mail.21cn.com/',
				'188.com': 'http://www.188.com/',
				'foxmail.com': 'http://www.foxmail.com'
			};
			for (var j in hash) {
				if (hash[MailLink]) {
					Link.href = hash[MailLink];
				} else {
					Link.href = "http://mail." + hash[MailLink];
				}
			}
		},
		//进度条
		progress: function progress(id, process) {
			var canvas = document.getElementById(id);
			if (process == 100) {
				$("#" + id).hide();
			} else {
				$("#" + id).show();
			}
			//x,y 坐标,radius 半径,process 百分比,backColor 中心颜色, proColor 进度颜色, fontColor 中心文字颜色
			var x = canvas.width / 2;
			var y = canvas.height / 2;
			var radius = 60;
			var process = process;
			var backColor = '#f3f3f3';
			var proColor = '#8C61DA';
			var fontColor = '#8C61DA';
			if (canvas.getContext) {
				var cts = canvas.getContext('2d');
			} else {
				return;
			}
			cts.beginPath();
			// 坐标移动到圆心  
			cts.moveTo(x, y);
			// 画圆,圆心是24,24,半径24,从角度0开始,画到2PI结束,最后一个参数是方向顺时针还是逆时针  
			cts.arc(x, y, radius, 0, Math.PI * 2, false);
			cts.closePath();
			// 填充颜色  
			cts.fillStyle = backColor;
			cts.fill();

			cts.beginPath();
			// 画扇形的时候这步很重要,画笔不在圆心画出来的不是扇形  
			cts.moveTo(x, y);
			cts.lineWidth = 10; //预填充环的宽度
			// 跟上面的圆唯一的区别在这里,不画满圆,画个扇形  
			cts.arc(x, y, radius, Math.PI * 1.5, Math.PI * 1.5 - Math.PI * 2 * process / 100, true);
			cts.closePath();
			cts.fillStyle = proColor;
			cts.fill();

			//填充背景白色
			cts.beginPath();
			cts.moveTo(x, y);
			cts.arc(x, y, radius - radius * 0.26 + 10, 0, Math.PI * 2, true);
			cts.closePath();
			cts.fillStyle = '#ffffff';
			cts.fill();

			//在中间写字 
			cts.font = "bold 9pt Arial";
			cts.fillStyle = fontColor;
			cts.textAlign = 'center';
			cts.textBaseline = 'middle';
			cts.moveTo(x, y);
			cts.fillText(process + "%", x, y);
		},
		// 根据参数名称获取value    
		getUrlParameter: function getUrlParameter(paramKey) {
			var sURLVariables,
			    i,
			    sParameterName,
			    sPageURL = window.location.search.substring(1);
			if (sPageURL) {
				sURLVariables = sPageURL.split("&");
				for (i = 0; i < sURLVariables.length; i++) {
					sParameterName = sURLVariables[i].split("=");
					if (sParameterName[0] === paramKey) return sParameterName[1];
				}
			}
		},
		setCookie: function setCookie(name, value, time) {
			var strsec = pt_utils.getsec(time);
			var exp = new Date();
			exp.setTime(exp.getTime() + strsec * 1);
			document.cookie = name + "=" + escape(value) + ";expires=" + exp.toGMTString();
		},
		getsec: function getsec(str) {
			var str1 = str.substring(1, str.length) * 1;
			var str2 = str.substring(0, 1);
			if (str2 == "s") {
				return str1 * 1000;
			} else if (str2 == "h") {
				return str1 * 60 * 60 * 1000;
			} else if (str2 == "d") {
				return str1 * 24 * 60 * 60 * 1000;
			}
		},
		getCookie: function getCookie(name) {
			var arr,
			    reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");
			if (arr = document.cookie.match(reg)) return unescape(arr[2]);else return null;
		},
		delCookie: function delCookie(name) {
			var exp = new Date();
			exp.setTime(exp.getTime() - 1);
			var cval = getCookie(name);
			if (cval != null) document.cookie = name + "=" + cval + ";expires=" + exp.toGMTString();
		},
		clearCookie: function clearCookie() {
			var keys = document.cookie.match(/[^ =;]+(?=\=)/g);
			if (keys) {
				for (var i = keys.length; i--;) {
					document.cookie = keys[i] + '=0;expires=' + new Date(0).toUTCString();
				}
			}
		},
		getToken: function getToken() {
			var jsonp = {};
			if (pt_utils.getCookie("token") !== null) {
				jsonp.token = pt_utils.getCookie("token");
				jsonp.uid = pt_utils.getCookie("uid");
				jsonp.username = pt_utils.getCookie("username");
			} else {
				Showbo.Msg.confirm("token已过期，请重新登录！", function (flag) {
					if (flag) {
						window.location.href = "login.html";
					}
				});
			}
			return jsonp;
		},
		showBox: function showBox(msg) {
			Showbo.Msg.alert(msg);
			//		var time = setInterval(function() {
			//			Showbo.Msg.hide();
			//			clearInterval(time);
			//		}, 3000);
		},
		confirmBox: function confirmBox(msg) {
			Showbo.Msg.confirm(msg, function (flag) {
				if (flag) {
					window.location.href = "login.html";
				}
			});
		}
	};
	exports.default = pt_utils;

/***/ })
/******/ ]);