/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _pt_utilEs = __webpack_require__(1);

	var _pt_utilEs2 = _interopRequireDefault(_pt_utilEs);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	_pt_utilEs2.default.namespace('PT.forgetPW');

	PT.forgetPW = function () {
		this.valid = true;
		this.time = null;
		this.http = _pt_utilEs2.default.http();
		this.init();
		this.bindEvent();
	};

	PT.forgetPW.prototype = {
		init: function init() {
			var self = this;
			self.active("forget_step1");
			$("#flash").on("click", function () {
				$("#code").attr("src", self.http.server + "?identity=imgcode&random=" + Math.random() + "&method=verify.image.get");
			});
			//发送验证码
			$("#forget-btn1").click(function () {
				if (self.validate()) {
					self.sendCode();
				}
			});
			//重新获取
			$("#regetCode").click(function () {
				self.sendCode();
			});
			//注册
			$("#submit").click(function () {
				if (self.validRg()) {
					self.submit();
				}
			});
			//进入邮箱
			$("#goEail").click(function () {
				_pt_utilEs2.default.goEail($('#address').text(), 'goEail');
			});
			$("#goback").click(function () {
				window.history.go(-1);
			});
		},
		bindEvent: function bindEvent() {
			var self = this;
			var username = $("#username");
			var codetext = $("#codetext");
			var getCode = $("#getCode");
			var password = $("#password");
			var password2 = $("#secondPW");

			username.focus(function () {
				username.css('border', '1px solid #dbdbdb');
				$("#un_error").hide();
				codetext.css('border', '1px solid #dbdbdb');
				$("#co_error").hide();
			});
			username.blur(function () {
				self.validUser(username);
			});
			codetext.focus(function () {
				codetext.css('border', '1px solid #dbdbdb');
				$("#co_error").hide();
			});
			codetext.blur(function () {
				self.validCode(codetext);
			});
			getCode.focus(function () {
				getCode.css('border', '1px solid #dbdbdb');
				//			$("#spw_error").hide();
			});
			password.focus(function () {
				password.css('border', '1px solid #dbdbdb');
				//			$("#spw_error").hide();
			});
			password.blur(function () {
				self.validPW(password);
			});
			password2.focus(function () {
				password2.css('border', '1px solid #dbdbdb');
				//			$("#spw_error").hide();
			});
			password2.blur(function () {
				self.validRePw(password2, password);
			});
		},
		validRg: function validRg() {
			var self = this;
			var valid = true;
			var getCode = $("#getCode");
			var password = $("#password");
			var password2 = $("#secondPW");
			(function () {
				var flag = self.validPW(password);
				valid = valid && flag;
			})();
			(function () {
				var flag = self.validRePw(password2, password);
				valid = valid && flag;
			})();
			return valid;
		},
		validRePw: function validRePw(password2, password) {
			var flag = true;
			if (null == $.trim(password2.val()) || "" == $.trim(password2.val()) || $.trim(password2.val()).length == 0) {
				flag = false;
				password2.css('border', '1px solid #f15556');
				$("#spw_error").text("请再次输入登录密码");
				$("#spw_error").show();
			} else if ($.trim(password2.val()) !== $.trim(password.val())) {
				flag = false;
				password2.css('border', '1px solid #f15556');
				$("#spw_error").text("请确认两次密码是否一致");
				$("#spw_error").show();
			} else {
				password2.css('border', '1px solid #dbdbdb');
				//			$("#spw_error").hide();
				flag = true;
			}
			return flag;
		},
		validPW: function validPW(password) {
			var flag = true;
			if (null == password.val() || "" == password.val() || password.val().length == 0) {
				flag = false;
				password.css('border', '1px solid #f15556');
				$("#spw_error").text("请输入登录密码");
				$("#spw_error").show();
			} else if (!_pt_utilEs2.default.fChkPassword($.trim(password.val()))) {
				flag = false;
				password.css('border', '1px solid #f15556');
				$("#spw_error").text("密码长度应为8-16个字符的英文字母和数字");
				$("#spw_error").show();
			} else {
				password.css('border', '1px solid #dbdbdb');
				//			$("#spw_error").hide();
				flag = true;
			}
			return flag;
		},
		validUser: function validUser(username) {
			var self = this;
			var flag = true;
			if (null == username.val() || "" == username.val() || username.val().length == 0) {
				flag = false;
				username.css('border', '1px solid #f15556');
				$("#un_error").text("请输入手机号/邮箱地址");
				$("#un_error").show();
			} else if (!_pt_utilEs2.default.fChkMail(username.val()) && !_pt_utilEs2.default.isphone(username.val())) {
				flag = false;
				username.css('border', '1px solid #f15556');
				$("#un_error").text("手机号/邮箱输入格式错误");
				$("#un_error").show();
			} else {
				flag = self.asyncUnit();
			}
			return flag;
		},
		//验证账号唯一性
		asyncUnit: function asyncUnit() {
			var self = this;
			var flag = true;
			var username = $("#username");
			var obj = {};
			var method = "";
			var url = "";
			if (_pt_utilEs2.default.isphone(username.val())) {
				obj = {
					mobile: username.val()
				};
				method = "cloud.oauth.mobile.check";
				url = self.http.server + "?mobile=" + obj.mobile + "&method=" + method;
			} else if (_pt_utilEs2.default.fChkMail(username.val())) {
				obj = {
					email: username.val()
				};
				method = "cloud.oauth.email.check";
				url = self.http.server + "?email=" + obj.email + "&method=" + method;
			}

			$.ajax({
				type: 'get',
				url: url,
				headers: {
					"method": method,
					"appid": self.http.appid,
					"sign": _pt_utilEs2.default.getSign(JSON.stringify(obj), self.http.secretkey),
					"timestramp": Date.parse(new Date()) / 1000
				},
				cache: false,
				async: false,
				success: function success(data) {
					if (data.error_code == 0) {
						username.css('border', '1px solid #f15556');
						$("#un_error").text("该账户不存在，请先注册账户");
						$("#un_error").show();
						flag = false;
					} else {
						username.css('border', '1px solid #dbdbdb');
						$("#un_error").hide();
						flag = true;
					}
				},
				error: function error(XMLHttpRequest, textStatus, errorThrown) {}
			});
			return flag;
		},
		validCode: function validCode(codetext) {
			var self = this;
			var flag = true;
			if (codetext.val() == null || codetext.val() == '' || codetext.val() == undefined) {
				codetext.css('border', '1px solid #f15556');
				$("#co_error").text("请输入识别码");
				$("#co_error").show();
				flag = false;
			} else {
				flag = self.checkCode(codetext);
			}
			return flag;
		},
		validate: function validate() {
			var self = this;
			var valid = true;
			var username = $("#username");
			var codetext = $("#codetext");

			(function () {
				var flag = self.validUser(username);
				valid = valid && flag;
			})();

			(function () {
				var flag = self.validCode(codetext);
				valid = valid && flag;
			})();
			return valid;
		},
		checkCode: function checkCode(codetext) {
			var self = this;
			var obj = {
				identity: "imgcode",
				code: codetext.val()
			};
			var flag = true;
			$.ajax({
				type: 'post',
				url: self.http.server,
				headers: {
					"method": "verify.image.check",
					"appid": self.http.appid,
					"sign": _pt_utilEs2.default.getSign(JSON.stringify(obj), self.http.secretkey),
					"timestramp": Date.parse(new Date()) / 1000
				},
				data: JSON.stringify(obj),
				dataType: 'json',
				contentType: "application/json; charset=utf-8",
				//          beforeSend: function() {
				//              var loading  =  $('<div class="loadingMask"></div>');
				//              var loadEffect = $('<div class="loadEffect"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></div>');
				//              loadEffect.appendTo(loading);
				//              loading.appendTo("body");
				//          },
				//          complete:   function() {
				//              $(".loadingMask").remove();
				//          },
				cache: false,
				async: false,
				success: function success(data) {
					if (data.error_code == 0) {
						codetext.css('border', '1px solid #dbdbdb');
						$("#co_error").hide();
						flag = true;
					} else {
						codetext.css('border', '1px solid #f15556');
						$("#co_error").text("识别码错误");
						$("#co_error").show();
						flag = false;
					}
				},
				error: function error(XMLHttpRequest, textStatus, errorThrown) {}
			});
			return flag;
		},
		//发送验证码
		sendCode: function sendCode() {
			var self = this;
			var obj = {
				addr: $("#username").val(),
				identity: "imgcode",
				code: $("#codetext").val()
			};
			$.ajax({
				type: 'post',
				url: self.http.server,
				headers: {
					"method": "cloud.oauth.verify.send",
					"appid": self.http.appid,
					"sign": _pt_utilEs2.default.getSign(JSON.stringify(obj), self.http.secretkey),
					"timestramp": Date.parse(new Date()) / 1000
				},
				data: JSON.stringify(obj),
				dataType: 'json',
				contentType: "application/json; charset=utf-8",
				beforeSend: function beforeSend() {
					var loading = $('<div class="loadingMask"></div>');
					var loadEffect = $('<div class="loadEffect"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></div>');
					loadEffect.appendTo(loading);
					loading.appendTo("body");
				},
				complete: function complete() {
					$(".loadingMask").remove();
				},
				cache: false,
				success: function success(data) {
					if (data.error_code == 0) {
						Showbo.Msg.alert("发送验证码成功");
						$("#username2").text($("#username").val());
						self.active("forget_step2");
					} else {
						$("#co_error").text(data.msg);
						$("#co_error").show();
					}
				},
				error: function error(XMLHttpRequest, textStatus, errorThrown) {}
			});
		},
		/**
	  * 提交
	  */
		submit: function submit() {
			var self = this;
			var username = $("#username").val();
			var password = $("#password").val();
			var repassword = $("#secondPW").val();
			var code = $("#getCode").val();
			var obj = {};
			var method = "";
			if (_pt_utilEs2.default.isphone(username)) {
				obj = {
					mobile: username,
					password: password,
					repassword: repassword,
					code: code
				};
				method = "cloud.oauth.mobile.password.forget";
			} else if (_pt_utilEs2.default.fChkMail(username)) {
				obj = {
					email: username,
					password: password,
					repassword: repassword,
					code: code
				};
				method = "cloud.oauth.email.password.forget";
			}
			$.ajax({
				type: 'post',
				url: self.http.server,
				headers: {
					"method": method,
					"appid": self.http.appid,
					"sign": _pt_utilEs2.default.getSign(JSON.stringify(obj), self.http.secretkey),
					"timestramp": Date.parse(new Date()) / 1000
				},
				data: JSON.stringify(obj),
				dataType: 'json',
				contentType: "application/json; charset=utf-8",
				beforeSend: function beforeSend() {
					var loading = $('<div id="loadingMask" class="loadingMask"></div>');
					var loadEffect = $('<div class="loadEffect"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></div>');
					loadEffect.appendTo(loading);
					loading.appendTo("body");
				},
				complete: function complete() {
					$(".loadingMask").remove();
				},
				cache: false,
				success: function success(data) {
					if (data.error_code == 0) {
						$("#spw_error").hide();
						//成功
						self.active("forget_step3");
						self.timer();
					} else {
						$("#spw_error").text(data.msg);
						$("#spw_error").show();
					}
				},
				error: function error(XMLHttpRequest, textStatus, errorThrown) {}
			});
		},
		timer: function timer() {
			var self = this;
			var num = 5;
			self.time = setInterval(function () {
				num--;
				if (num == 0) {
					window.location.href = "login.html";
					clearInterval(self.time);
				} else {
					$(".timer").text(num + "");
				}
			}, 1000);
		},
		//显示的页面
		active: function active(str) {
			var self = this;
			var arr = ['forget_step1', 'forget_step2', 'forget_step3'];
			$.each(arr, function (i, value) {
				if (str == value) {
					$('#' + value).show();
					$.each(arr, function (j, other) {
						if (other !== value) {
							$('#' + other).hide();
						}
					});
				}
			});
		}
	};
	$(document).ready(function () {

		new PT.forgetPW();

		//	console.log(PT);
	});

/***/ }),
/* 1 */
/***/ (function(module, exports) {

	"use strict";

	Object.defineProperty(exports, "__esModule", {
		value: true
	});
	/**
	 * 公共方法
	 */
	var pt_utils = {
		http: function http() {
			//测试
			//		const server = "http://dev-api-open.ptdev.cn/";
			//		const appid = "1018040505148900352";
			//		const secretkey = "07E138230250439E8E24293F19B6D725";
			//线上
			var server = "https://api-open.putao.com/";
			var appid = "1018043273668494336";
			var secretkey = "07E13AFF126A4CAFBE58171AAB1CEE51";
			return {
				server: server,
				appid: appid,
				secretkey: secretkey
			};
		},
		getSign: function getSign(str, secretkey) {
			return hex_sha1(hex_md5(str).toLowerCase() + secretkey).toLowerCase();
		},
		namespace: function namespace() {
			for (var _len = arguments.length, obj = Array(_len), _key = 0; _key < _len; _key++) {
				obj[_key] = arguments[_key];
			}

			var a, v, x, o, d, i, j, len1, len2;
			a = obj;
			len1 = a.length;
			// 支持多参数,如两个参数（a.b.c, d.e）
			for (i = 0; i < len1; i++) {
				d = a[i].split('.'); // 分解成数组，如把a.b.c分解成[a,b,c]
				o = window[d[0]] = window[d[0]] || {}; // 保证a是对象,若果全局有就用全局的，如果没有就新建{}
				x = d.slice(1); //取出[b,c]
				len2 = x.length;

				// 支持嵌套，对b和c
				for (j = 0; j < len2; j++) {
					v = x[j];
					o = o[v] = o[v] || {}; // o逐层深入，保证每层都是对象，如果是b，o变为a.b，如果是c，o最后变成a.b.c
				}
			}
		},
		/*判断输入是否为合法的手机号码*/
		isphone: function isphone(inputString) {
			var partten = /^1[0-9]{10}$/;
			var bchk = partten.test(inputString);
			return bchk;
		},
		//验证邮箱
		fChkMail: function fChkMail(mail) {
			var reg = /^[A-Za-z\d]+([-_.][A-Za-z\d]+)*@([A-Za-z\d]+[-.])+[A-Za-z\d]{2,5}$/;
			var bchk = reg.test(mail);
			return bchk;
		},
		//密码长度应为8-16个字符的英文字母和数字
		fChkPassword: function fChkPassword(password) {
			var reg = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{8,16}$/;
			var bchk = reg.test(password);
			return bchk;
		},
		dateFormat: function dateFormat(time) {
			var format_result = time.getFullYear() + "/";

			if (time.getMonth() + 1 < 10) {
				format_result += "0";
			}
			format_result += time.getMonth() + 1 + "/";
			if (time.getDate() < 10) {
				format_result += "0";
			}
			format_result += time.getDate() + " ";
			if (time.getHours() < 10) {
				format_result += "0";
			}
			format_result += time.getHours() + ":";
			if (time.getMinutes() < 10) {
				format_result += "0";
			}
			format_result += time.getMinutes();
			return format_result;
		},
		//邮箱
		goEail: function goEail(email, ln) {
			var Link = document.getElementById(ln);
			var MailLink = email.split("@")[1];
			MailLink = MailLink.toLowerCase();
			var hash = {
				'qq.com': 'http://mail.qq.com',
				'gmail.com': 'http://mail.google.com',
				'sina.com': 'http://mail.sina.com.cn',
				'163.com': 'http://mail.163.com',
				'126.com': 'http://mail.126.com',
				'yeah.net': 'http://www.yeah.net/',
				'sohu.com': 'http://mail.sohu.com/',
				'tom.com': 'http://mail.tom.com/',
				'sogou.com': 'http://mail.sogou.com/',
				'139.com': 'http://mail.10086.cn/',
				'hotmail.com': 'http://www.hotmail.com',
				'live.com': 'http://login.live.com/',
				'live.cn': 'http://login.live.cn/',
				'live.com.cn': 'http://login.live.com.cn',
				'189.com': 'http://webmail16.189.cn/webmail/',
				'yahoo.com.cn': 'http://mail.cn.yahoo.com/',
				'yahoo.cn': 'http://mail.cn.yahoo.com/',
				'eyou.com': 'http://www.eyou.com/',
				'21cn.com': 'http://mail.21cn.com/',
				'188.com': 'http://www.188.com/',
				'foxmail.com': 'http://www.foxmail.com'
			};
			for (var j in hash) {
				if (hash[MailLink]) {
					Link.href = hash[MailLink];
				} else {
					Link.href = "http://mail." + hash[MailLink];
				}
			}
		},
		//进度条
		progress: function progress(id, process) {
			var canvas = document.getElementById(id);
			if (process == 100) {
				$("#" + id).hide();
			} else {
				$("#" + id).show();
			}
			//x,y 坐标,radius 半径,process 百分比,backColor 中心颜色, proColor 进度颜色, fontColor 中心文字颜色
			var x = canvas.width / 2;
			var y = canvas.height / 2;
			var radius = 60;
			var process = process;
			var backColor = '#f3f3f3';
			var proColor = '#8C61DA';
			var fontColor = '#8C61DA';
			if (canvas.getContext) {
				var cts = canvas.getContext('2d');
			} else {
				return;
			}
			cts.beginPath();
			// 坐标移动到圆心  
			cts.moveTo(x, y);
			// 画圆,圆心是24,24,半径24,从角度0开始,画到2PI结束,最后一个参数是方向顺时针还是逆时针  
			cts.arc(x, y, radius, 0, Math.PI * 2, false);
			cts.closePath();
			// 填充颜色  
			cts.fillStyle = backColor;
			cts.fill();

			cts.beginPath();
			// 画扇形的时候这步很重要,画笔不在圆心画出来的不是扇形  
			cts.moveTo(x, y);
			cts.lineWidth = 10; //预填充环的宽度
			// 跟上面的圆唯一的区别在这里,不画满圆,画个扇形  
			cts.arc(x, y, radius, Math.PI * 1.5, Math.PI * 1.5 - Math.PI * 2 * process / 100, true);
			cts.closePath();
			cts.fillStyle = proColor;
			cts.fill();

			//填充背景白色
			cts.beginPath();
			cts.moveTo(x, y);
			cts.arc(x, y, radius - radius * 0.26 + 10, 0, Math.PI * 2, true);
			cts.closePath();
			cts.fillStyle = '#ffffff';
			cts.fill();

			//在中间写字 
			cts.font = "bold 9pt Arial";
			cts.fillStyle = fontColor;
			cts.textAlign = 'center';
			cts.textBaseline = 'middle';
			cts.moveTo(x, y);
			cts.fillText(process + "%", x, y);
		},
		// 根据参数名称获取value    
		getUrlParameter: function getUrlParameter(paramKey) {
			var sURLVariables,
			    i,
			    sParameterName,
			    sPageURL = window.location.search.substring(1);
			if (sPageURL) {
				sURLVariables = sPageURL.split("&");
				for (i = 0; i < sURLVariables.length; i++) {
					sParameterName = sURLVariables[i].split("=");
					if (sParameterName[0] === paramKey) return sParameterName[1];
				}
			}
		},
		setCookie: function setCookie(name, value, time) {
			var strsec = pt_utils.getsec(time);
			var exp = new Date();
			exp.setTime(exp.getTime() + strsec * 1);
			document.cookie = name + "=" + escape(value) + ";expires=" + exp.toGMTString();
		},
		getsec: function getsec(str) {
			var str1 = str.substring(1, str.length) * 1;
			var str2 = str.substring(0, 1);
			if (str2 == "s") {
				return str1 * 1000;
			} else if (str2 == "h") {
				return str1 * 60 * 60 * 1000;
			} else if (str2 == "d") {
				return str1 * 24 * 60 * 60 * 1000;
			}
		},
		getCookie: function getCookie(name) {
			var arr,
			    reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");
			if (arr = document.cookie.match(reg)) return unescape(arr[2]);else return null;
		},
		delCookie: function delCookie(name) {
			var exp = new Date();
			exp.setTime(exp.getTime() - 1);
			var cval = getCookie(name);
			if (cval != null) document.cookie = name + "=" + cval + ";expires=" + exp.toGMTString();
		},
		clearCookie: function clearCookie() {
			var keys = document.cookie.match(/[^ =;]+(?=\=)/g);
			if (keys) {
				for (var i = keys.length; i--;) {
					document.cookie = keys[i] + '=0;expires=' + new Date(0).toUTCString();
				}
			}
		},
		getToken: function getToken() {
			var jsonp = {};
			if (pt_utils.getCookie("token") !== null) {
				jsonp.token = pt_utils.getCookie("token");
				jsonp.uid = pt_utils.getCookie("uid");
				jsonp.username = pt_utils.getCookie("username");
			} else {
				Showbo.Msg.confirm("token已过期，请重新登录！", function (flag) {
					if (flag) {
						window.location.href = "login.html";
					}
				});
			}
			return jsonp;
		},
		showBox: function showBox(msg) {
			Showbo.Msg.alert(msg);
			//		var time = setInterval(function() {
			//			Showbo.Msg.hide();
			//			clearInterval(time);
			//		}, 3000);
		},
		confirmBox: function confirmBox(msg) {
			Showbo.Msg.confirm(msg, function (flag) {
				if (flag) {
					window.location.href = "login.html";
				}
			});
		}
	};
	exports.default = pt_utils;

/***/ })
/******/ ]);